"""

design team: rebecca fox, michail-karolos keranis, mark muscat & anamaria beatrice spulber

ENCODED MATTER, BARTLETT 2012

Instructor: Ezio Blasetti

code developed in python for rhinoceros beta 5.0

"""

import rhinoscriptsyntax as rs

a = []

class Attractor():

    def __init__(self,MESHID,MAGNITUDE, COLORS):

        #here we initiate the class by matching the inputs to the variables in the class

        self.meshID = MESHID

        self.mag = MAGNITUDE

        self.colors = COLORS

        self.vtxs = rs.MeshVertices(self.meshID)



    def getInfluenceVec(self, agent):

        #create a vector between the current agent and the current attractor

        temp = rs.MeshClosestPoint(self.meshID, agent.pos)

        pos = temp[0]

        newVec = rs.VectorCreate(pos,agent.pos)

        #unitize keep the direction of the vector but makes the length equal to 1

        newVec = rs.VectorUnitize(newVec)

        dist = rs.Distance(pos,agent.pos)

        if dist < agent.radious : dist = agent.radious

        #scale the vector according to the magnitude of the attractor (and the distance from it)

        newVec = rs.VectorScale(newVec,self.mag/dist)

        return newVec

        



class Agent():

    

    def __init__(self, POS, VEC, POINTID, ALIGNMENT, SEPARATION ,COHESION, ATTRACTION, RADIOUS ):

        #here we initiate the class by matching the inputs to the variables in the class

        self.pos = POS

        self.vec = VEC

        self.pointID = POINTID

        self.alignment = ALIGNMENT

        self.separation = SEPARATION

        self.cohesion = COHESION

        self.attraction = ATTRACTION

        self.radious = RADIOUS

        #here we make a new list to contain all previous positions for the trail

        self.trailPts = []

        #save the current position as the first point in the trail

        self.trailPts.append(self.pos)

        #here we make a new variable to contan the ID string of the trail

        self.trailID = ""

        print "made an agent"



    def update(self, attractorPopulation, agentPopulation):

        #update the vector of the agent

        self.updateVecAttr(attractorPopulation)

        self.updateVec(agentPopulation)

        closestMeshVtxIndex = rs.PointArrayClosestPoint(attractorPopulation[0].vtxs, self.pos)

        colorOfClosestVtx = attractorPopulation[0].colors[closestMeshVtxIndex]

        #########################################################################################

        red = rs.ColorRedValue(colorOfClosestVtx)

        green = rs.ColorGreenValue(colorOfClosestVtx)

        blue = rs.ColorBlueValue(colorOfClosestVtx)

        luminance = ( (red/255) + (green/255) + (blue/255) )/ 3

        #if luminance < 0.5:

            #self.vec = rs.VectorScale(self.vec, luminance)

        self.separation = (0.2 + luminance)

        print red

        #########################################################################################

        #move each agent

        self.move()

        #draw trail of each agent

        #self.drawTrail()

        #self.drawNetwork(agentPopulation)



    def move(self):

        #updates the position list of the agent

        self.pos = rs.PointAdd(self.pos, self.vec)

        #store the new position in the trail list

        self.trailPts.append(self.pos)

        #delete the old point object in rhino space

        rs.DeleteObject(self.pointID)

        #make a new point object in rhino soace and store its new ID

        self.pointID = rs.AddPoint(self.pos)

    

    def updateVec(self, agentPopulation):

        neighborAgents = []

        neighborAgentsDistances = []

        for currentOtherAgent in agentPopulation :

            coord = currentOtherAgent.pos

            dist = rs.Distance (self.pos,coord)

            if dist< self.radious and dist>0:

                neighborAgents.append(currentOtherAgent)

                neighborAgentsDistances.append(dist)

        #print len(neighborAgents)

        #neighborAgents.remove(self)

        #print len(neighborAgents)

        

        if len(neighborAgents)>0:

            acc = [0,0,0]

            aVec = self.AlignmentVector(neighborAgents, neighborAgentsDistances)

            if rs.VectorLength(aVec)>0:

                aVec = rs.VectorUnitize(aVec)

            aVec = rs.VectorScale(aVec, self.alignment)

            sVec = self.SeparationVector (neighborAgents, neighborAgentsDistances)

            if rs.VectorLength(sVec)>0:

                sVec = rs.VectorUnitize(sVec)

            sVec = rs.VectorScale(sVec, self.separation)

            cVec = self.CohesionVector (neighborAgents)

            if rs.VectorLength(cVec)>0:

                cVec = rs.VectorUnitize(cVec)

            cVec = rs.VectorScale(cVec, self.cohesion)

            acc = rs.PointAdd(acc, aVec)

            acc = rs.PointAdd(acc, sVec)

            acc = rs.PointAdd(acc, cVec)

            

            self.vec = rs.PointAdd(self.vec, acc)

            

            #self.vec = rs.VectorScale(self.vec, 1/10)

            self.vec = rs.VectorUnitize(self.vec)

 

    def AlignmentVector(self, neighborAgents, neighborAgentsDistances):

        resultingVec =[0,0,0]

        for i in range(len(neighborAgents)):

            agent = neighborAgents[i]

            currentDist = neighborAgentsDistances[i]

            vec = rs.VectorScale(agent.vec,self.radious/currentDist)

            resultingVec = rs.PointAdd(resultingVec, vec)

        return resultingVec



    def SeparationVector (self, neighborAgents, neighborAgentsDistances):

        resultingVec = [0,0,0]

        for i in range(len(neighborAgents)):

            agent = neighborAgents[i]

            currentDist = neighborAgentsDistances[i]

            coord = agent.pos

            tempVec = rs.VectorCreate(self.pos, coord)

            tempVec = rs.VectorScale(tempVec, self.radious/currentDist)

            if tempVec != None : resultingVec = rs.PointAdd (resultingVec, tempVec)

        #print len(neighborAgents)

        return resultingVec

        

    def CohesionVector (self, neighborAgents):

        sum = [0,0,0]

        for agent in neighborAgents :

            sum = rs.PointAdd(agent.pos, sum)

        sum = rs.VectorScale(sum,1/len(neighborAgents))

        currentDist = rs.Distance(self.pos, sum)

        resultingVec = rs.VectorCreate(sum, self.pos)

        resultingVec = rs.VectorScale(resultingVec,self.radious/currentDist)

        return resultingVec



    def drawTrail(self):

        #delete the old trail curve

        if self.trailID:

            rs.DeleteObject(self.trailID)

        #make a new trail curve from the trailPts list

        self.trailID = rs.AddCurve(self.trailPts)

        

    def updateVecAttr(self,attractorPopulation):

        #loop through the attractors in the attractorPopulation

        for myAttractor in attractorPopulation :

            vec = myAttractor.getInfluenceVec(self)

            #add the new vector to the current vector (self.vec)

            vec = rs.VectorScale(vec,self.attraction)

            self.vec = rs.PointAdd(self.vec,vec)





def Main():

    #get some points from the user to use as agent positions

    pointGUIDs = pts

    attractorGUIDs = meshes

    colors = meshcolors



    #######################

    #start a list of attractors

    attractorPopulation = []



    for attractorGUID in attractorGUIDs:

        attractorPopulation.append(Attractor(attractorGUID, 1, colors))





    #######################

    #start a list of agents

    agentPopulation = []



    #setup the list of agents

    for pointGUID in pointGUIDs:

        coord = rs.PointCoordinates(pointGUID)

        for i in range(1):

        #we start an instance of agent 

        # a, s, c

            agentPopulation.append( Agent(coord,[0,0,-1], pointGUID, al, sep, coh, attr, radious) )

            

    #######################

    

    for i in range(steps):

        rs.EnableRedraw(False)

        for agent in agentPopulation:

            agent.update(attractorPopulation, agentPopulation)

        rs.EnableRedraw(True)

    

    for agent in agentPopulation:

        a.append(rs.AddCurve(agent.trailPts))

Main()
